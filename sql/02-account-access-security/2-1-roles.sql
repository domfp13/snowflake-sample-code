USE ROLE SYSADMIN;
USE DATABASE SNOWPROCORE;
USE SCHEMA PUBLIC;
USE WAREHOUSE SNOWPROCORE;

-- 1.- Creating a custom role analyst
USE ROLE SECURITYADMIN;
CREATE OR REPLACE ROLE ANALYST
 COMMENT  = 'ANALYST';

-- 2.- Take a look ta the user interface to visualize the role

-- 3.- Granting role analyst to role sysadmin
USE ROLE SECURITYADMIN;
GRANT ROLE ANALYST TO ROLE SYSADMIN;
GRANT ROLE ANALYST TO USER <YOUR_USER>; -- Change this and use your user
--GRANT ROLE ANALYST TO USER ENRIQUEP;

-- 4.- Assume the new role
USE ROLE ANALYST;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER; -- This will fail since we do not have access to the table

-- 5.- Granting access to the table
USE ROLE SECURITYADMIN;
GRANT SELECT ON TABLE SNOWPROCORE.PUBLIC.CUSTOMER TO ROLE ANALYST;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER; -- This will fail again WHY?

-- 5.- Granting access to parent containers
USE ROLE SECURITYADMIN;
GRANT USAGE ON DATABASE SNOWPROCORE TO ROLE ANALYST;
GRANT USAGE ON SCHEMA SNOWPROCORE.PUBLIC TO ROLE ANALYST;

-- 6.- Selecting table
USE ROLE ANALYST;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER LIMIT 10; -- This will fail gain WHY?

-- 7.- Grating access to warehouse
USE ROLE SECURITYADMIN;
GRANT USAGE ON WAREHOUSE SNOWPROCORE TO ROLE ANALYST;

-- 8.- Selecting table
USE ROLE ANALYST;
USE WAREHOUSE SNOWPROCORE;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER LIMIT 10;

-- 9.- Creating a table
USE ROLE ANALYST;
SELECT C_MKTSEGMENT, COUNT(*) AS COUNT_OF_MKTSEGMENT FROM SNOWPROCORE.PUBLIC.CUSTOMER GROUP BY ALL;
CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY AS SELECT C_MKTSEGMENT, COUNT(*) AS COUNT_OF_MKTSEGMENT FROM SNOWPROCORE.PUBLIC.CUSTOMER GROUP BY ALL; -- This will fail

-- 10.- Granting creation of table
USE ROLE SECURITYADMIN;
GRANT CREATE TABLE ON SCHEMA SNOWPROCORE.PUBLIC TO ROLE ANALYST;

USE ROLE ANALYST;
USE WAREHOUSE SNOWPROCORE;
CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY AS SELECT C_MKTSEGMENT, COUNT(*) AS COUNT_OF_MKTSEGMENT FROM SNOWPROCORE.PUBLIC.CUSTOMER GROUP BY ALL;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY;

-- 11.- Showing grants: Exam question, what is the difference between the following
SHOW GRANTS OF ROLE ANALYST; -- This show to whom the role has been granted and to which users as been assigned to.
SHOW GRANTS TO ROLE ANALYST; -- Take a look at the different privileges

-- 12.- Since we have a hierarchy in place (the ANALYST role falls under the SYSADMIN), we can do the following
USE ROLE SYSADMIN;
DROP TABLE IF EXISTS SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY;

-- 13.- Lets break the hierarchy and explore the DAC (Discretionary Access Control)
USE ROLE SECURITYADMIN;
REVOKE ROLE ANALYST FROM ROLE SYSADMIN;
SHOW GRANTS TO ROLE ANALYST;

USE ROLE ANALYST;
USE WAREHOUSE SNOWPROCORE;
CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY AS SELECT C_MKTSEGMENT, COUNT(*) AS COUNT_OF_MKTSEGMENT FROM SNOWPROCORE.PUBLIC.CUSTOMER GROUP BY ALL;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY;

USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY; -- This will fail because of the DAC (Discretionary Access Control) since the ANALYST Role owns the table an there is no hierarchy in place
SHOW TABLES IN SCHEMA SNOWPROCORE.PUBLIC; -- Where is the table?

USE ROLE ANALYST;
GRANT SELECT ON TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY TO ROLE SYSADMIN; -- Notice Analyst has the ability to grant access to the table, do we want this behavior?

USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY;
SHOW TABLES IN SCHEMA SNOWPROCORE.PUBLIC; -- SYSADMIN can see it not that ANALYST granted the access but ANALYST has full control over the object.

USE ROLE ANALYST;
REVOKE SELECT ON TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY FROM ROLE SYSADMIN;

USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
SHOW TABLES IN SCHEMA SNOWPROCORE.PUBLIC; -- Table is not longer visible, how can we change this behavior?

-- 14.- Managed Schemas: In a managed access schema, object owners lose the ability to make grant decisions. Only the schema owner
USE ROLE ACCOUNTADMIN;
ALTER SCHEMA SNOWPROCORE.PUBLIC ENABLE MANAGED ACCESS;
SHOW SCHEMAS IN DATABASE SNOWPROCORE;

USE ROLE SYSADMIN;
USE DATABASE SNOWPROCORE;
SHOW TABLES IN SCHEMA PUBLIC; -- We should be able to see the table the Analyst created AND revoked access to from us now that this schema is managed.
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY; -- This will fail, since RBAC is in place but SYSADMIN owns the Schema that why we can at least see the table.
DROP TABLE IF EXISTS SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY; -- This will also fail since we do not have access to the table

USE ROLE ANALYST;
GRANT SELECT ON TABLE SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY TO ROLE SYSADMIN; -- Notice Analyst LOST the ability to grant access to the table

-- How do we fix this?. Either SECURITYADMIN moves the owership of the table to SYSADMIN or we can reestablish the hierarchy.

-- 15.- Option 1: SECURITYADMIN moves the ownership of the table to SYSADMIN
USE ROLE SECURITYADMIN;
GRANT OWNERSHIP ON ALL TABLES IN SCHEMA SNOWPROCORE.PUBLIC TO ROLE SYSADMIN COPY CURRENT GRANTS; -- This will guarantee that all current tables will be owned by SYSADMIN and the grants will be presserved.
GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA SNOWPROCORE.PUBLIC TO ROLE SYSADMIN; -- This will guarantee that all future tables will be owned by SYSADMIN.

USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
SELECT * FROM SNOWPROCORE.PUBLIC.CUSTOMER_SUMMARY;
SHOW TABLES IN SCHEMA SNOWPROCORE.PUBLIC;

-- 15. Option 2: Reestablish the hierarchy
--USE ROLE SECURITYADMIN;
--GRANT ROLE ANALYST TO ROLE SYSADMIN;
