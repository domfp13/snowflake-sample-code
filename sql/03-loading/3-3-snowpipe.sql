
-- Snowpipe loads data from files as soon as they are available in a stage. The data is loaded according to the COPY statement defined in a referenced pipe.
USE ROLE ACCOUNTADMIN;

CREATE STORAGE INTEGRATION IF NOT EXISTS AWS_SNOWFLAKE_EP_SNOWPROCORE
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = '<iam_role>'
  STORAGE_ALLOWED_LOCATIONS = ('s3://snowflake-ep-snowprocore/');

-- Get information from the integration object
DESC INTEGRATION AWS_SNOWFLAKE_EP_SNOWPROCORE;

-- Grant usage on the integration to a SYSADMIN role
GRANT USAGE ON INTEGRATION AWS_SNOWFLAKE_EP_SNOWPROCORE TO ROLE SYSADMIN;

-- Create a stage that references the integration
USE ROLE SYSADMIN;

CREATE OR REPLACE STAGE SNOWPROCORE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS_AWS
  STORAGE_INTEGRATION = AWS_SNOWFLAKE_EP_SNOWPROCORE
  URL = 's3://snowflake-ep-snowprocore/accounts/'
  FILE_FORMAT = SNOWPROCORE.PUBLIC.FILE_FORMAT_JSON_GENERIC;

LIST @SNOWPROCORE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS_AWS;

-- CREATING NEW TABLE
CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS (
    ACCESSIBLE_BALANCE                         VARCHAR,
    ACCOUNT_BALANCE                            VARCHAR,
    ACCOUNT_STATUS_CODE                        VARCHAR,
    ACCOUNT_UID                                VARCHAR,
    CDIC_HOLD_STATUS_CODE                      VARCHAR,
    CURRENCY_CODE                              VARCHAR,
    CURRENT_CDIC_HOLD_AMOUNT                   VARCHAR,
    DEPOSITOR_ID                               VARCHAR,
    INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE VARCHAR,
    PRODUCT_CODE                               VARCHAR,
    REGISTERED_ACCOUNT_FLAG                    VARCHAR,
    REGISTERED_PLAN_TYPE_CODE                  VARCHAR,
    FILE_NAME                                  VARCHAR,
    FILE_ROW_NUMBER                            VARCHAR
);

-- CREATING SNOWPIPE
CREATE PIPE SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS_PIPE AUTO_INGEST=TRUE AS
COPY INTO SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS (ACCESSIBLE_BALANCE,ACCOUNT_BALANCE,ACCOUNT_STATUS_CODE,
                        ACCOUNT_UID,CDIC_HOLD_STATUS_CODE,CURRENCY_CODE,
                        CURRENT_CDIC_HOLD_AMOUNT,DEPOSITOR_ID,
                        INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE,PRODUCT_CODE,
                        REGISTERED_ACCOUNT_FLAG,REGISTERED_PLAN_TYPE_CODE,
                        FILE_NAME,FILE_ROW_NUMBER)
FROM (
    SELECT $1:ACCESSIBLE_BALANCE::VARCHAR AS ACCESSIBLE_BALANCE,
       $1:ACCOUNT_BALANCE::VARCHAR AS ACCOUNT_BALANCE,
       $1:ACCOUNT_STATUS_CODE::VARCHAR AS ACCOUNT_STATUS_CODE,
       $1:ACCOUNT_UID::VARCHAR AS ACCOUNT_UID,
       $1:CDIC_HOLD_STATUS_CODE::VARCHAR AS CDIC_HOLD_STATUS_CODE,
       $1:CURRENCY_CODE::VARCHAR AS CURRENCY_CODE,
       $1:CURRENT_CDIC_HOLD_AMOUNT::VARCHAR AS CURRENT_CDIC_HOLD_AMOUNT,
       $1:DEPOSITOR_ID::VARCHAR AS DEPOSITOR_ID,
       $1:INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE::VARCHAR AS INSURANCE_DETERMINATION_CATEGORY_TYPE_CODE,
       $1:PRODUCT_CODE::VARCHAR AS PRODUCT_CODE,
       $1:REGISTERED_ACCOUNT_FLAG::VARCHAR AS REGISTERED_ACCOUNT_FLAG,
       $1:REGISTERED_PLAN_TYPE_CODE::VARCHAR AS REGISTERED_PLAN_TYPE_CODE,
       metadata$filename::VARCHAR AS FILE_NAME,
       metadata$file_row_number::VARCHAR AS FILE_ROW_NUMBER
    FROM @SNOWPROCORE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS_AWS
)
FILE_FORMAT = SNOWPROCORE.PUBLIC.FILE_FORMAT_JSON_GENERIC
PATTERN = '.*.json'
ON_ERROR = 'skip_file'
--PURGE = TRUE
;

-- CHECKING THE PIPE
SHOW PIPES;

-- CHECKING THE DATA
SELECT * FROM SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS;

-- AWS CP
-- aws s3 cp SNOWBANK_PUBLIC_ACCOUNTS_1.json s3://snowflake-ep-snowprocore/accounts/

SELECT SYSTEM$PIPE_STATUS('SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS_PIPE');

-- CLEAN UP
DROP TABLE SNOWPROCORE.PUBLIC.ACCOUNTS_RAW_AWS;