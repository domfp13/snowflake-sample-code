-- Creating a task that orchestrates the entire process
USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
USE DATABASE SNOWPROCORE;
USE SCHEMA SNOWPROCORE.PUBLIC;

-- Creating a Task that will kick off the process
CREATE OR REPLACE TASK SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK
  SCHEDULE = '5 MINUTE'
  -- WAREHOUSE = SNOWPROCORE
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  SUSPEND_TASK_AFTER_NUM_FAILURES = 3
  COMMENT = 'Task to load JSON files from the stage into the target table'
  AS
	COPY INTO SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION
	FROM @SNOWPROCORE.PUBLIC.JSON_FILES_STAGE
	FILE_FORMAT = SNOWPROCORE.PUBLIC.FILE_FORMAT_JSON_GENERIC
	MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
	PATTERN = '.*.json.gz'
	PURGE = TRUE;

-- Why do we get an error when we try to create the task?

-- Enabling the Task
USE ROLE ACCOUNTADMIN;
GRANT EXECUTE MANAGED TASK ON ACCOUNT TO ROLE SYSADMIN;
GRANT EXECUTE TASK ON ACCOUNT TO ROLE SYSADMIN;

-- Let's try to create the task again
USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;
USE DATABASE SNOWPROCORE;
USE SCHEMA SNOWPROCORE.PUBLIC;

CREATE OR REPLACE TASK SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK
  --USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
  SCHEDULE = '5 MINUTE'
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  SUSPEND_TASK_AFTER_NUM_FAILURES = 3
  COMMENT = 'Task to load JSON files from the stage into the target table'
  AS
	COPY INTO SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION
	FROM @SNOWPROCORE.PUBLIC.JSON_FILES_STAGE
	FILE_FORMAT = SNOWPROCORE.PUBLIC.FILE_FORMAT_JSON_GENERIC
	MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
	PATTERN = '.*.json.gz'
	PURGE = TRUE;

-- CREATE A DAG OF TASKS
CREATE OR REPLACE TASK SNOWPROCORE.PUBLIC.LOAD_ACCOUNTS_SILVER
  USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  COMMENT = 'Task to load stream into silver table'
  AFTER SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK
  WHEN SYSTEM$STREAM_HAS_DATA('SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM')
  AS
	INSERT INTO SNOWPROCORE.PUBLIC.ACCOUNTS_SILVER
	SELECT ACCESSIBLE_BALANCE, ACCOUNT_BALANCE, ACCOUNT_STATUS_CODE, ACCOUNT_UID, CDIC_HOLD_STATUS_CODE, CURRENCY_CODE
	FROM SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM;

-- LOAD THE JSON FILES INTO THE STAGE
PUT file://///Users/eplata/Developer/personal/snowflake-sample-code/sql/06-advance-sql/SNOWBANK_PUBLIC_ACCOUNTS_4.json @SNOWPROCORE.PUBLIC.JSON_FILES_STAGE;

LS @SNOWPROCORE.PUBLIC.JSON_FILES_STAGE;

-- IMPORTANT: TASK AS ALWAYS INIALLY SUSPENDED
ALTER TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_ACCOUNTS_SILVER RESUME;  -- RESUME IS FROM RIGHT TO LEFT
ALTER TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK RESUME;

-- EXECUTE TASK SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK; -- TASK CAN ALSO BE EXECUTED USING THE UI

-- CHECKING THE TASK
SHOW TASKS IN SNOWPROCORE.PUBLIC;
LIST @SNOWPROCORE.PUBLIC.JSON_FILES_STAGE;

-- CHECK THE TARGET TABLE
SELECT COUNT(*) FROM SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION;

-- CHECK THE STREAM 
SELECT COUNT(*) FROM SNOWPROCORE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM;

-- CHECK SILVER TABLE
SELECT COUNT(*) FROM SNOWPROCORE.PUBLIC.ACCOUNTS_SILVER;

-- ************** CLEAN UP **************
USE ROLE ACCOUNTADMIN;
ALTER TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK SUSPEND;  -- SUSPEND IS FROM LEFT TO RIGHT
ALTER TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_ACCOUNTS_SILVER SUSPEND;
DROP TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_JSON_FILES_TASK;
DROP TASK IF EXISTS SNOWPROCORE.PUBLIC.LOAD_ACCOUNTS_SILVER;
REVOKE EXECUTE MANAGED TASK ON ACCOUNT FROM ROLE SYSADMIN;
REVOKE EXECUTE TASK ON ACCOUNT FROM ROLE SYSADMIN;
