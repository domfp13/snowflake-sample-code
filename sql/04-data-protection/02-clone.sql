USE ROLE SYSADMIN;
USE DATABASE SNOWPROCORE;
USE SCHEMA PUBLIC;
USE WAREHOUSE SNOWPROCORE;

SELECT * FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL;

/***** 1. Create a table based on table.
*****/
CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE CLONE SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL;

SELECT * FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE;


/***** 2. What happens if I affect any of the two objects?
*****/
DELETE FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE
WHERE ROW_ID = 6;

UPDATE SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL
SET USER_NAME = 'MARK C'
WHERE ROW_ID = 6;

SELECT *, 'TIME_TRAVEL' AS ORIGIN
FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL
UNION ALL
SELECT *, 'CLONE' AS ORIGIN
FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE;

/***** 3. Cloning and time travel
*****/

BEGIN;
INSERT INTO SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL (USER_NAME) VALUES ('Luis');
SET QUERY_ID = (SELECT LAST_QUERY_ID(1));
COMMIT;

SELECT $QUERY_ID;

SELECT * FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL BEFORE(STATEMENT => '<<<CHANGE ME WITH QUERY ID>>>');

CREATE OR REPLACE TABLE SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE2 CLONE
    SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL BEFORE (STATEMENT => '<<<CHANGE ME WITH QUERY ID>>>');

SELECT * FROM SNOWPROCORE.PUBLIC.TEST_NO_EXPLICIT_TIMETRAVEL_CLONE2;

/***** 1. Create schema based on another schema with time travel.
*****/
CREATE SCHEMA restored_schema clone my_schema at(offset => -3600);

/***** 8. Sintax for time travel
*****/

--creates a clone of a table as of the date and time represented by the specified timestamp:
CREATE TABLE RESTORED_TABLE CLONE MY_TABLE
  AT(TIMESTAMP => 'MON, 09 MAY 2015 01:01:00 +0300'::TIMESTAMP_TZ);

--The following CREATE SCHEMA command creates a clone of a schema and all its
--objects as they existed 1 hour before the current time:
CREATE SCHEMA RESTORED_SCHEMA CLONE MY_SCHEMA AT(OFFSET => -3600);

 --The following CREATE DATABASE command creates a clone of a database and
 --all its objects as they existed prior to the completion of the specified statement:
CREATE DATABASE RESTORED_DB CLONE MY_DB
  BEFORE(STATEMENT => '');