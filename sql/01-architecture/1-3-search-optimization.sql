-- Search optimization improves the performance of certain types of lookup and analytical queries.
-- Selective point lookup queries on tables. A point lookup query returns only one or a small number of distinct rows.

USE ROLE SYSADMIN;
USE WAREHOUSE SNOWPROCORE;

-- 1.- Create a database from the share TPCH_SF1000
USE DATABASE SNOWPROCORE;

CREATE OR REPLACE SCHEMA SNOWPROCORE.TPCH WITH MANAGED ACCESS
 DATA_RETENTION_TIME_IN_DAYS = 2;

-- 2.- Load some data

-- Increase the warehouse size to 4XL
ALTER WAREHOUSE SNOWPROCORE SET WAREHOUSE_SIZE = 'XXXLARGE';

-- Adding a few tables from the TPCH_SF1000 shared schema
BEGIN TRANSACTION;
    CREATE OR REPLACE TABLE SNOWPROCORE.TPCH.PARTSUPP AS
    SELECT PS_PARTKEY,
           CAST(PS_SUPPKEY AS VARCHAR(50)) AS PS_SUPPKEY,
           PS_AVAILQTY, PS_SUPPLYCOST, PS_COMMENT
    FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1000.PARTSUPP;

    CREATE OR REPLACE TABLE SNOWPROCORE.TPCH.SUPPLIER AS
    SELECT CAST(S_SUPPKEY AS VARCHAR(50)) AS S_SUPPKEY, S_NAME, S_ADDRESS, CAST(S_NATIONKEY AS VARCHAR(50)) AS S_NATIONKEY,
           S_PHONE, S_ACCTBAL, S_COMMENT
    FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1000.SUPPLIER;
COMMIT;

ALTER WAREHOUSE SNOWPROCORE SET WAREHOUSE_SIZE = 'XSMALL';

-- 3.- Verify the tables and look for search_optimization columns
SHOW TABLES LIKE 'PARTSUPP' IN SCHEMA SNOWPROCORE.TPCH;
SHOW TABLES LIKE 'SUPPLIER' IN SCHEMA SNOWPROCORE.TPCH;

-- 4.- Exploring the tables

-- PARTSUPP
SELECT * FROM SNOWPROCORE.TPCH.PARTSUPP LIMIT 5;

-- SUPPLIER
SELECT * FROM SNOWPROCORE.TPCH.SUPPLIER LIMIT 5;

-- 5.- Querying the tables without search optimization

-- Disable cache so there is nothing on cloud services layer
ALTER SESSION SET USE_CACHED_RESULT = FALSE;

-- Query 1: Without Search Optimization
ALTER WAREHOUSE SNOWPROCORE SUSPEND;

ALTER SESSION SET QUERY_TAG = 'Query 1: Without SO';

SELECT *
FROM SNOWPROCORE.TPCH.PARTSUPP PS
INNER JOIN SNOWPROCORE.TPCH.SUPPLIER S
 ON PS.PS_SUPPKEY = S.S_SUPPKEY
WHERE PS.PS_SUPPKEY LIKE '999999%'
 AND S.S_NATIONKEY NOT LIKE '2';

ALTER SESSION UNSET QUERY_TAG;

-- GETTING THE DISTINCT COUNT OF PS_PARTKEY AND PS_SUPPKEY
SELECT APPROX_COUNT_DISTINCT(PS_PARTKEY) FROM SNOWPROCORE.TPCH.PARTSUPP;
SELECT APPROX_COUNT_DISTINCT(S_NATIONKEY) FROM SNOWPROCORE.TPCH.SUPPLIER;

-- Adding Search Optimization
ALTER TABLE SNOWPROCORE.TPCH.PARTSUPP ADD SEARCH OPTIMIZATION ON EQUALITY(PS_SUPPKEY);
ALTER TABLE SNOWPROCORE.TPCH.SUPPLIER ADD SEARCH OPTIMIZATION ON EQUALITY(S_NAME, S_NATIONKEY), SUBSTRING(S_NAME);

-- Now, let's verify that Search Optimization is enabled and the backend process has finished indexing our data
DESCRIBE SEARCH OPTIMIZATION ON SNOWPROCORE.TPCH.PARTSUPP;
DESCRIBE SEARCH OPTIMIZATION ON SNOWPROCORE.TPCH.SUPPLIER;

SHOW TABLES LIKE 'PARTSUPP' IN SCHEMA SNOWPROCORE.TPCH;
SHOW TABLES LIKE 'SUPPLIER' IN SCHEMA SNOWPROCORE.TPCH;

-- Query 2: With Search Optimization
ALTER WAREHOUSE SNOWPROCORE SUSPEND;

ALTER SESSION SET QUERY_TAG = 'Query 2: With SO';

SELECT *
FROM SNOWPROCORE.TPCH.PARTSUPP PS
INNER JOIN SNOWPROCORE.TPCH.SUPPLIER S
 ON PS.PS_SUPPKEY = S.S_SUPPKEY
WHERE PS.PS_SUPPKEY LIKE '999999%'
 AND S.S_NATIONKEY NOT LIKE '2';

ALTER SESSION UNSET QUERY_TAG;

-- Cost of a enabled search optimization on the table SUPPLIER for a equality predicate on the column S_SUPPKEY
SELECT SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS('SNOWPROCORE.TPCH.SUPPLIER', 'EQUALITY(S_SUPPKEY)')
  AS estimate_for_columns_without_search_optimization;
